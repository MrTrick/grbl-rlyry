STUFF TO REMEMBER:

Configuration
-------------

1) Need to enable:
config.h:152: // #define COREXY // Default disabled. Uncomment to enable.

2) References to 'spindle', might need to remove? (After checking references)
config.h:239-263
	// Enables variable spindle output voltage for different RPM values. On the Arduino Uno, the spindle
	// enable pin will output 5V for maximum RPM with 256 intermediate levels and 0V when disabled.
	// NOTE: IMPORTANT for Arduino Unos! When enabled, the Z-limit pin D11 and spindle enable pin D12 switch!
	// The hardware PWM output on pin D11 is required for variable spindle output voltages.
	#define VARIABLE_SPINDLE // Default enabled. Comment to disable.

	// Used by the variable spindle output only. These parameters set the maximum and minimum spindle speed
	// "S" g-code values to correspond to the maximum and minimum pin voltages. There are 256 discrete and 
	// equally divided voltage bins between the maximum and minimum spindle speeds. So for a 5V pin, 1000
	// max rpm, and 250 min rpm, the spindle output voltage would be set for the following "S" commands: 
	// "S1000" @ 5V, "S250" @ 0.02V, and "S625" @ 2.5V (mid-range). The pin outputs 0V when disabled.
	#define SPINDLE_MAX_RPM 1000.0 // Max spindle RPM. This value is equal to 100% duty cycle on the PWM.
	#define SPINDLE_MIN_RPM 0.0    // Min spindle RPM. This value is equal to (1/256) duty cycle on the PWM.
	.....continued

	
3) Per-machine defaults;
defaults.h:44-48
	#ifdef DEFAULTS_SHAPEOKO
	  // Description: Shapeoko CNC mill with three NEMA 17 stepper motors, driven by Synthetos
	  // grblShield with a 24V, 4.2A power supply.
	  #include "defaults/defaults_shapeoko.h"
	#endif
Typically only defines machine settings, but might be appropriate to define other settings and preprocessor directives without undue impact?

TODO: Needs other settings in it...

4) Pin mapping;
cpu_map.h:32-34
	#ifdef CPU_MAP_ATMEGA328P // (Arduino Uno) Officially supported by Grbl.
	  #include "cpu_map/cpu_map_atmega328p.h"
	#endif	
Definitely need to configure it here.
Possibly a group, like the 'VARIABLE_SPINDLE' mode?
Need to check the Atmega328p -> Arduino mapping!
Need to check the Arduino -> shield mapping and available pins!
Can't use limit switches / homing?


What to use?
------------
There *is* a coolant_control feature.
Uses the commands M07 M08 M09.
Grbl has the 'ENABLE_M7' define.

Usually spindle on/off is M03 M04 M05. (and looks like M03 M04 can have an S parameter)
(but the 'variable spindle' commands are in the eg S1234 params of other commands like G01)
https://en.wikipedia.org/wiki/G-code

Other things like 'A' axis and so on, but they might have interactions.
At least one 'raster engraving' controller uses G01 and S commands.

Use spindle controls 'S'

==============
More debugging
==============

Types:
------
 gc_modal_t; "The mode of the grbl" - lives inside state and parser block, has motion type, feed rate, etc etc
 gc_values_t; "Values being parsed" - lives inside parser block, has values for all the letter codes
 parser_state_t gc_state; "State of the parser" - includes mode, position, speed, line number, etc
 parser_block_t gc_block; "Next state, being parsed" - includes mode, values.
 
see system.h for 
  system_t sys; "Real-time state" - position, state (see STATE bitmasks) abort, suspend, etc
  int sys_probe_state 
  int sys_rt_exec_state (see EXEC bitmasks)
  int sys_rt_exec_alarm (see ALARM bitmasks)

Execution:
---------- (in gcode.c)
starts in 79:uint8_t gc_execute_line(char *line) 

83: =>Step 1. Init<=
clear gc_block, copy in the current mode

105: =>Step 2: Read a line of G-code in; every G and M and etc.<=
(storing in gc_block)

292: step 2 (still) - capture and update spindle mode on M3 or M5;
          case 3: case 5:
            word_bit = MODAL_GROUP_M7; 
            switch(int_value) {
              case 3: gc_block.modal.spindle = SPINDLE_ENABLE_CW; break;
              #ifndef USE_SPINDLE_DIR_AS_ENABLE_PIN
                case 4: gc_block.modal.spindle = SPINDLE_ENABLE_CCW; break;
              #endif
              case 5: gc_block.modal.spindle = SPINDLE_DISABLE; break;
(critically - sets mode to _DISABLE, _ENABLE_CW or _ENABLE_CCW)

346: step 2 (still) - capture and store the 'S' value. Allows float. (ignores the VARIABLE_SPINDLE flag)
          case 'S': word_bit = WORD_S; gc_block.values.s = value; break;
	TODO: Should it disallow mantissa values? (like line 279)

398: =>Step 3: Validation / Setting stuff?<=
(lots of individual [x. ] steps, most aren't relevant to spindle

451: step 3.4; If spindle speed wasn't set, load the current value into the block.
  // [4. Set spindle speed ]: S is negative (done.)
  if (bit_isfalse(value_words,bit(WORD_S))) { gc_block.values.s = gc_state.spindle_speed; }
  // bit_false(value_words,bit(WORD_S)); // NOTE: Single-meaning value word. Set at end of error-checking.
    
840: =>Step 4: Execution!<=
(by this point the error checking is done and the desired stuff is in place)

851: step 4.4 Set spindle speed 
(Calls spindle_run() if the speed has changed, updates state)
  // [4. Set spindle speed ]:
  if (gc_state.spindle_speed != gc_block.values.s) { 
    // Update running spindle only if not in check mode and not already enabled.
    if (gc_state.modal.spindle != SPINDLE_DISABLE) { spindle_run(gc_state.modal.spindle, gc_block.values.s); }
    gc_state.spindle_speed = gc_block.values.s; 
  }
	
NB!!!: modal.spindle is not the speed, it's the spindle's mode!! Argh. See line 292.

862: step 4.7 Set spindle "mode"
(Calls spindle_run() if the spindle _MODE_ has changed, updates mode)
  // [7. Spindle control ]:
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
    // Update spindle control and apply spindle speed when enabling it in this block.    
    spindle_run(gc_block.modal.spindle, gc_state.spindle_speed);
    gc_state.modal.spindle = gc_block.modal.spindle;    
  }
  
1932: step 4.21 Program flow - If completed, stop!
       ...
	} else { // == PROGRAM_FLOW_COMPLETED
	    ...
    	gc_state.modal.spindle = SPINDLE_DISABLE;
    ...
	spindle_stop()
    ...
	
Execution complete!

Spindle Control: (See spindle_control.c/h)
---------------- 
Note: Does protocol_buffer_synchronise prevent changing motor speed on the fly?
Calls protocol_buffer_synchronize() in protocol.c

Stuff: (system.h)
-------
See system.h for flag maps, global types, EXEC_ (alarms), STATE_, SUSPEND_

Protocol: (See protocol.c)
---------
=>protocol_buffer_synchronise<= 
 "wait until buffered steps are executed"
 calls protocol_execute_realtime() repeatedly until sys.state is not STATE_CYCLE
 (meaning that it's finished with the 
 
=>protocol_execute_realtime<=
 - Are there any alarms? No, continue.
 - Is the system doing something? (nb there is rt_alarm, rt_exec and sys.state, all different)
     - If RESET then abort and exit.
	 - If STATUS then print status.
	 - If rt_exec is in a hold state? (CANCEL/FEED/SAFETY) do stuff.
     - If rt_exec should start up (START)
	     - check for other hold/etc stop conditions
		 - if running but state was idle, start things up (including call spindle_set_state() again)
		 - take it out of start up mode
     - If rt_exec should be stopping (STOP)
	     - stop things (including spindle_stop())
		 - take it out of 'be stopping' mode
 - If sys.state is in a bunch of states reload the step segment buffer
    (that is used for movements)
 - Check the safety doors
 - If sys.suspend is checked, start over!
 
....conclusion?
SO, it looks like the check in protocol_buffer_synchronise() 
*might* prevent the spindle from changing rpm unless stopped?
Hard to know from analysis whether it leaves STATE_CYCLE between commands.

====================
Pins...
====================
How many are available? None... but for now can use;
10	PB2	Digital Pin (PWM)	Y_LIMIT_BIT	Limit Y-Axis	MULTI0
11	PB3	Digital Pin (PWM)	(Z_LIMIT_BIT)	Limit Z-Axis	MULTI1
12	PB4	Digital Pin	(Z_LIMIT_BIT|SPINDLE_ENABLE_BIT)	Spindle Enable	MULTI2
13	PB5	Digital Pin	(SPINDLE_ENABLE_BIT|SPINDLE_DIRECTION_BIT)	Spindle Direction	MULTI3

Needs to disable the limit checks?
Put all limit pins on pin9?

In multi, do not use SPINDLE_ENABLE_BIT or SPINDLE_DIRECTION_BIT.


Put changes in place.
Still need to;
 - Fix up the issue that homing is ??? inoperable? No idea.
 - Figure out how to home if possible.
 - Figure out whether the code compiles!
 - Parse and truncate and store the "rpm" value in gcode.c, not spindle_control.c

